@using Microsoft.AspNetCore.Components.WebAssembly.Services;
@using System.Reflection;
@inject LazyAssemblyLoader _lazyLoader;

<CascadingValue Value="7" Name="Value">
    <Router AppAssembly="@typeof(App).Assembly" 
AdditionalAssemblies="new[]{typeof(Component1).Assembly}"
OnNavigateAsync="OnNavigateAsync">
    <Found Context="routeData">
        <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
            <Authorizing>
                Checking creds...
            </Authorizing>
            <NotAuthorized>
                <text>Custom not authorized</text>
            </NotAuthorized>
        </AuthorizeRouteView>
        <FocusOnNavigate RouteData="@routeData" Selector="h1" />
    </Found>
    <NotFound>
        <CascadingAuthenticationState>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <CustomNotFound />
            </LayoutView>
        </CascadingAuthenticationState>

    </NotFound>
</Router>
</CascadingValue>


@code {
    private List<Assembly> LazyLoadedAssemblies = new List<Assembly>();
    private async Task OnNavigateAsync(NavigationContext args)
    {


        if (args.Path.EndsWith("counter"))
        {
            var assemblies = await _lazyLoader.LoadAssembliesAsync(new List<string> { "MathNet.Numerics.dll" });
            LazyLoadedAssemblies.AddRange(assemblies);
        }

    }
}
