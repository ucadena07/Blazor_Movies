<EditForm Model="Movie" OnValidSubmit="OnDataAnnotaionValidated">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label>Title:</label>
        <div>
            <InputText class="form-control" @bind-Value="@Movie.Title" />
            <ValidationMessage For="@(() => Movie.Title)" />
        </div>
    </div>
    <div class="form-group">
        <label>In Theathers:</label>
        <div>
            <InputCheckbox @bind-Value="@Movie.InTheathers" />
            <ValidationMessage For="@(() => Movie.InTheathers)" />
        </div>
    </div>
    <div class="form-group">
        <label>Trailer:</label>
        <div>
            <InputText class="form-control" @bind-Value="@Movie.Trailer" />
            <ValidationMessage For="@(() => Movie.Trailer)" />
        </div>
    </div>
    <div class="form-group">
        <label>Release Date:</label>
        <div>
            <InputDate class="form-control" @bind-Value="@Movie.ReleaseDate" />
            <ValidationMessage For="@(() => Movie.ReleaseDate)" />
        </div>
    </div>
    <div class="form-group">
        <InputImage Label="Picture" OnSelectedImage="PosterSelected" ImageUrl="@imageUrl" />
    </div>

    <div class="form-group form-markdown">
        <InputMarkdown Label="Biography" @bind-Value="Movie.Summary" For="@(() => Movie.Summary)" />
    </div>

    <div class="form-group">
        <label>Genres:</label>
        <div>
            <MutipleSelector Selected="Selected" NotSelected="NotSelected"/>
        </div>
    </div>
    <div class="form-group">
        <label>Actors:</label>
        <div>
            <MultipleSelectorTypeahed Context="person" SearchMethod="SeachMethod" SelectedElements="SelectedActors">
           <MyResultTemplate>
                    <img src="@person.Picture" alt="" style="width: 50px"/>
                    @person.Name
           </MyResultTemplate>
           <MyListTemplate>
               @person.Name / <input type="text" placeholder="Character" @bind="person.Character"/>
           </MyListTemplate>
         </MultipleSelectorTypeahed>
        </div>
    </div>
    <button class="btn btn-primary" type="submit">Submit</button>
</EditForm>

@code {
    [Parameter] public Movie Movie { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public List<Genre> SelectedGenres { get; set; } = new();
    [Parameter] public List<Genre> NotSelectedGenres { get; set; } = new();
    [Parameter] public List<Person> SelectedActors { get; set; } = new();

    private List<MultipleSelectorModel> Selected = new();
    private List<MultipleSelectorModel> NotSelected = new();
    string imageUrl;

    protected override void OnInitialized()
    {
        Selected = SelectedGenres.Select(it => new MultipleSelectorModel(it.Id.ToString(), it.Name)).ToList();
        NotSelected = NotSelectedGenres.Select(it => new MultipleSelectorModel(it.Id.ToString(), it.Name)).ToList();
        if (!string.IsNullOrEmpty(Movie.Poster))
        {
            imageUrl = Movie.Poster;
            Movie.Poster = null;
        }
    }

    private void PosterSelected(string image64)
    {
        Movie.Poster= image64;
        imageUrl = null;
    }

    private async Task<IEnumerable<Person>> SeachMethod(string searchText)
    {
        await Task.Delay(2000);
        return new List<Person>() { new Person { Id = 1, Name = "Tom Holland", Picture = "https://www.biography.com/.image/t_share/MTQ4MTUwOTQyMDE1OTU2Nzk4/tom-holland-photo-jason-kempin-getty-images-801510482-profile.jpg" }, new Person { Id = 2, Name = "Tom Hanks", Picture = "https://flxt.tmsimg.com/assets/62982_v9_bb.jpg" } };
    }

    private async Task OnDataAnnotaionValidated()
    {
        Movie.MoviesGenres = Selected.Select(it => new MoviesGenre {GenresId = int.Parse(it.Key) }).ToList();
        Movie.MoviesActors = SelectedActors.Select(it => new MoviesActors { PersonId = it.Id, Character = it.Character }).ToList();
        if (!string.IsNullOrEmpty(Movie.Poster))
            imageUrl = null;

        await OnValidSubmit.InvokeAsync(null);
    }

}
